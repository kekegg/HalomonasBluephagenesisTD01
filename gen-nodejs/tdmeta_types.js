//
// Autogenerated by Thrift Compiler (0.15.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
var mapOptions = module.exports.mapOptions = function(args) {
  this.zoomScale = null;
  this.ifReverse = null;
  if (args) {
    if (args.zoomScale !== undefined && args.zoomScale !== null) {
      this.zoomScale = args.zoomScale;
    }
    if (args.ifReverse !== undefined && args.ifReverse !== null) {
      this.ifReverse = args.ifReverse;
    }
  }
};
mapOptions.prototype = {};
mapOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.zoomScale = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.ifReverse = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

mapOptions.prototype.write = function(output) {
  output.writeStructBegin('mapOptions');
  if (this.zoomScale !== null && this.zoomScale !== undefined) {
    output.writeFieldBegin('zoomScale', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.zoomScale);
    output.writeFieldEnd();
  }
  if (this.ifReverse !== null && this.ifReverse !== undefined) {
    output.writeFieldBegin('ifReverse', Thrift.Type.I32, 2);
    output.writeI32(this.ifReverse);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

